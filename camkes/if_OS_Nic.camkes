/*
 * OS CAmkES Interface for a NIC
 *
 * Copyright (C) 2019-2021, HENSOLDT Cyber GmbH
 * SPDX-License-Identifier: BSD-3-Clause
 */

#pragma once

//------------------------------------------------------------------------------
// The RPC interface of if_OS_Nic
procedure if_OS_Nic {

    include "OS_Error.h";

    OS_Error_t
    tx_data(
        inout  size_t  len
    );

    OS_Error_t
    rx_data(
        out  size_t  len,
        out  size_t  frames_available
    );

    OS_Error_t
    get_mac_address(void);

};


//==============================================================================
// Component interface fields macros
//==============================================================================

//------------------------------------------------------------------------------
// The interface fields of a component implementing the user side of the NIC
// interface, except for the event. The event is excluded because the user side
// component can have multiple event sources connect to one event sink.
#define IF_OS_NIC_USE_WITHOUT_EVENT( \
    _prefix_, \
    _port_size_) \
    \
    uses      if_OS_Nic         _prefix_##_rpc; \
    dataport  Buf(_port_size_)  _prefix_##_from_port; /* input from NIC */ \
    dataport  Buf               _prefix_##_to_port; /* output to NIC */


//------------------------------------------------------------------------------
// The interface fields of a component implementing the user side of the NIC
// interface.
#define IF_OS_NIC_USE( \
    _prefix_, \
    _port_size_) \
    \
    consumes  EventDataAvailable  _prefix_##_event_hasData; \
    FIELDS_IF_OS_NIC_UPPER_WITHOUT_EVENT(_prefix_, _port_size_)


//------------------------------------------------------------------------------
// Fields of a component implementing the nic side of the NIC interface.
#define IF_OS_NIC_PROVIDE( \
    _prefix_, \
    _port_size_) \
    \
    provides  if_OS_Nic           _prefix_##_rpc; \
    emits     EventDataAvailable  _prefix_##_event_hasData; \
    dataport  Buf(_port_size_)    _prefix_##_to_port; /* input to user */ \
    dataport  Buf                 _prefix_##_from_port; /* output from user */


//==============================================================================
// Component interface field connection macros
//==============================================================================

//------------------------------------------------------------------------------
// Connect two components via the NIC interface, but leave out the connection
// for event. Rationale is, that often multiple event sources are connected to
// the same event sink. This can be done with IF_OS_NIC_CONNECT_EVENT() then.
#define IF_OS_NIC_CONNECT_WITHOUT_EVENT( \
    _inst_user_, \
    _inst_user_field_prefix_, \
    _inst_nic_, \
    _inst_nic_field_prefix_) \
    \
    connection seL4RPCCall \
        conn_##_inst_user_##_##_inst_nic_##_rpc( \
            from _inst_user_._inst_user_field_prefix_##_rpc, \
            to   _inst_nic_._inst_nic_field_prefix_##_rpc); \
    \
    connection seL4SharedData \
        conn_##_inst_user_##_##_inst_nic_##_port_input( \
            from _inst_user_._inst_user_field_prefix_##_from_port, \
            to   _inst_nic_._inst_nic_field_prefix_##_to_port, ); \
    \
    connection seL4SharedData \
        conn_##_inst_nic_##_##_inst_user_##_port_output( \
            from _inst_nic_._inst_nic_field_prefix_##_from_port, \
            to   _inst_user_._inst_user_field_prefix_##_to_port);


//------------------------------------------------------------------------------
// Connect the NIC event between two components.
#define IF_OS_NIC_CONNECT_EVENT( \
    _inst_user_, \
    _inst_user_event_, \
    _inst_nic_, \
    _inst_nic_field_prefix_) \
    \
    connection seL4NotificationNative \
        conn_##_inst_nic_##_##_inst_user_##_event_hasData( \
            from _inst_nic_._inst_nic_field_prefix_##_event_hasData, \
            to   _inst_user_._inst_user_event_);

//------------------------------------------------------------------------------
// Connect two components via the NIC interface, including the event.
#define IF_OS_NIC_CONNECT( \
    _inst_user_, \
    _inst_user_field_prefix_, \
    _inst_nic_, \
    _inst_nic_field_prefix__) \
    \
    IF_OS_NIC_CONNECT_WITHOUT_EVENT( \
        _inst_user_, \
        _inst_user_field_prefix_, \
        _inst_nic_, \
        _inst_nic_field_prefix_) \
    IF_OS_NIC_CONNECT_EVENT( \
        _inst_user_, \
        _inst_user_event_, \
        _inst_nic_, \
        _inst_nic_field_prefix_)
