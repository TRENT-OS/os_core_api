/* Copyright (C) 2020, HENSOLDT Cyber GmbH */

/**
 * @file
 * @brief   Generic interface for accessing a data storage entity.
 *
 * @note    For this interface to work it is assumed that data is exchanged via
 *          a shared buffer.
 */

/** @hideinitializer */
procedure if_OS_Storage
{
    include "OS_Error.h";
    include "stdint.h";
    include "stdio.h";

    /**
     * @brief Writes data to the storage.
     *
     * @return Implementation specific.
     */
    OS_Error_t
    write(
        in  off_t  offset,      //!< [in]  Write start offset in bytes.
        in  size_t size,        //!< [in]  Number of bytes to be written.
        out size_t written      //!< [out] Number of bytes written.
    );

    /**
     * @brief Reads from the storage.
     *
     * @return Implementation specific.
     */
    OS_Error_t
    read(
        in  off_t  offset,      //!< [in]  Read start offset in bytes.
        in  size_t size,        //!< [in]  Number of bytes to be read.
        out size_t read         //!< [out] Number of bytes read.
    );

    /**
     * @brief Erases given storage's memory area.
     *
     * @return Implementation specific.
     */
    OS_Error_t
    erase(
        in  off_t offset,        //!< [in]  Erase start offset in bytes.
        in  off_t size,          //!< [in]  Number of bytes to be erased.
        out off_t erased         //!< [out] Number of bytes erased.
    );

    /**
     * @brief  Gets the storage size in bytes.
     *
     * @return Implementation specific.
     */
    OS_Error_t
    getSize(
        out off_t size         //!< [out] The size of the storage in bytes.
    );

    /**
     * @brief   Gets the storage block size in bytes.
     *
     * @note    Certain storages might only allow block-wise operation thus
     *          offset and size must be adjusted accordingly to this parameter.
     *
     * @note    Block cannot be larger than what we can address in the memory
     *          thus it's type shall be `size_t`.
     *
     * @return  Implementation specific.
     */
    OS_Error_t
    getBlockSize(
        out size_t blockSize    //!< [out] The size of the block in bytes.
    );

    /**
     * @brief Gets the state of the storage.
     *
     * @return OS_Error_t
     */
    OS_Error_t
    getState(
        out uint32_t flags  //!< [out] Implementation specific flags marking the
                            //!<        state.
    );
};
