/*
 * Copyright (C) 2019-2021, HENSOLDT Cyber GmbH
 * SPDX-License-Identifier: BSD-3-Clause
 */

/**
 * @file
 *
 * OS CAmkES Interface for Socket operations.
 *
 * This file describes the Socket interface in terms of CAmkES connections. This
 * interface defines the way an application component can connect to a generic
 * NetworkStack component as a "user" component: the interface is
 * <b>provided</b> by a NetworkStack component that implements it and gets
 * <b>used</b> by, for example, an application component that requires
 * networking functionalities.
 * The interface consists of:
 *  - RPC functions to be called by the user of the interface,
 *  - one shared memory space for the exchange of data between the user
 *    component of the interface and the NetworkStack component (interface
 *    provider),
 *  - one event emitted by the NetworkStack component (interface provider) to
 *    the user component, to signal that an event occurred on at least one of
 *    its created sockets.
 * Please see the macro IF_OS_SOCKET_PROVIDE() for further details.
 * The macros that this file defines facilitate the declaration of all the
 * needed CAmkES connectors for both sides of the interface.
 */

#pragma once

/**
 * The RPC interface of if_OS_Socket. All offered functions are non-blocking.
 *
 * @hideinitializer
 */
procedure if_OS_Socket {

    include "OS_Error.h";
    include "interfaces/if_OS_Socket.h";

    /**
     * Create a socket.
     *
     * @retval OS_SUCCESS                        Operation was successful.
     * @retval OS_ERROR_NETWORK_PROTO_NO_SUPPORT If the passed domain or type
     *                                           are unsupported.
     * @retval OS_ERROR_INSUFFICIENT_SPACE       If no free sockets could be
     *                                           found.
     * @retval other                             Each component implementing
     *                                           this might have additional
     *                                           error codes.
     *
     * @param[in]     domain  Domain of the socket that should be created.
     * @param[in]     type    Type of the socket that should be created.
     * @param[in,out] pHandle Handle that will be assigned to the created
     *                        socket.
     */
    OS_Error_t
    socket_create(
        in    int domain,
        in    int type,
        inout int pHandle
    );

    /**
     * Close a socket.
     *
     * @retval OS_SUCCESS              Operation was successful.
     * @retval OS_ERROR_INVALID_HANDLE If an invalid handle was passed.
     * @retval other                   Each component implementing this might
     *                                 have additional error codes.
     *
     * @param[in] handle Handle of the socket that should be closed.
     */
    OS_Error_t
    socket_close(
        in int handle
    );

    /**
     * Write data on a socket. This function checks if the socket is bound,
     * connected and that it isn't shutdown locally.
     *
     * @retval OS_SUCCESS                 Operation was successful.
     * @retval OS_ERROR_INVALID_HANDLE    If an invalid handle was passed.
     * @retval OS_ERROR_INVALID_PARAMETER If the requested length exceeds the
     *                                    dataport size.
     * @retval other                      Each component implementing this might
     *                                    have additional error codes.
     *
     * @param[in]     handle Handle of the socket to write on.
     * @param[in,out] pLen   Length of the data that should be written on the
     *                       socket. Will be overwritten by the function with
     *                       the actual amount that was written before it
     *                       returns.
     */
    OS_Error_t
    socket_write(
        in    int    handle,
        inout size_t pLen
    );

    /**
     * Read data from a socket. This function checks whether or not the socket
     * is bound.
     *
     * @retval OS_SUCCESS                     Operation was successful.
     * @retval OS_ERROR_INVALID_HANDLE        If an invalid handle was passed.
     * @retval OS_ERROR_INVALID_PARAMETER     If the requested length exceeds
     *                                        the dataport size.
     * @retval OS_ERROR_NETWORK_CONN_SHUTDOWN If the connection got shut down.
     * @retval OS_ERROR_CONNECTION_CLOSED     If the connection got closed.
     * @retval other                          Each component implementing this
     *                                        might have additional error codes.
     *
     * @param[in]     handle Handle of the socket to read from.
     * @param[in,out] pLen   Length of the data that should be read from the
     *                       socket. Will be overwritten by the function with
     *                       the actual amount that was read before it returns.
     */
    OS_Error_t
    socket_read(
        in    int    handle,
        inout size_t pLen
    );

    /**
     * Connect a socket to a specified address.
     *
     * @retval OS_SUCCESS                 Operation was successful.
     * @retval OS_ERROR_INVALID_HANDLE    If an invalid handle was passed.
     * @retval OS_ERROR_INVALID_PARAMETER If the passed address is invalid.
     * @retval other                      Each component implementing this might
     *                                    have additional error codes.
     *
     * @param[in] handle  Handle of the socket to connect.
     * @param[in] dstAddr Address of the destination to connect to.
     */
    OS_Error_t
    socket_connect(
        in    int                     handle,
        refin OS_NetworkSocket_Addr_t dstAddr
    );

    /**
     * Accept the next connection request on the queue of pending connections
     * for the listening socket.
     *
     * @retval OS_SUCCESS              Operation was successful.
     * @retval OS_ERROR_INVALID_HANDLE If an invalid handle was passed.
     * @retval other                   Each component implementing this might
     *                                 have additional error codes.
     *
     * @param[in]     handle        Handle of the listening socket.
     * @param[in,out] pHandleClient Handle that will be used to map the accepted
     *                              connection to.
     * @param[out]    srcAddr       Remote address of the incoming connection.
     */
    OS_Error_t
    socket_accept(
        in    int                     handle,
        inout int                     pHandleClient,
        out   OS_NetworkSocket_Addr_t srcAddr
    );

    /**
     * Listen for connections on an opened and bound socket.
     *
     * @retval OS_SUCCESS              Operation was successful.
     * @retval OS_ERROR_INVALID_HANDLE If an invalid handle was passed.
     * @retval other                   Each component implementing this might
     *                                 have additional error codes.
     *
     * @param[in] handle  Handle of the socket to listen on.
     * @param[in] backlog Sets the maximum size to which the queue of pending
     *                    connections may grow.
     */
    OS_Error_t
    socket_listen(
        in int handle,
        in int backlog
    );

    /**
     * Bind a specified port to a socket.
     *
     * @retval OS_SUCCESS              Operation was successful.
     * @retval OS_ERROR_INVALID_HANDLE If an invalid handle was passed.
     * @retval other                   Each component implementing this might
     *                                 have additional error codes.
     *
     * @param[in] handle    Handle of the socket to bind.
     * @param[in] localAddr Address to bind the socket to.
     */
    OS_Error_t
    socket_bind(
        in    int                     handle,
        refin OS_NetworkSocket_Addr_t localAddr
    );

    /**
     * Send data on a destination socket without checking if the destination is
     * connected or not and is therefore not connection-oriented.
     *
     * @retval OS_SUCCESS                 Operation was successful.
     * @retval OS_ERROR_INVALID_HANDLE    If an invalid handle was passed.
     * @retval OS_ERROR_INVALID_PARAMETER If the requested length exceeds the
     *                                    dataport size.
     * @retval other                      Each component implementing this might
     *                                    have additional error codes.
     *
     * @param[in]     handle  Handle to a previously created socket.
     * @param[in,out] pLen    Length of the data that should be written on the
     *                        destination socket. Will be overwritten by the
     *                        function with the actual amount that was written
     *                        before it returns.
     * @param[in]     dstAddr Address of the destination socket to send data on.
     */
    OS_Error_t
    socket_sendto(
        in    int                     handle,
        inout size_t                  pLen,
        refin OS_NetworkSocket_Addr_t dstAddr
    );

    /**
     * Receive data from a specified socket. This operation checks if the socket
     * is bound but not if it is connected and is therefore not
     * connection-oriented.
     *
     * @retval OS_SUCCESS                 Operation was successful.
     * @retval OS_ERROR_INVALID_HANDLE    If an invalid handle was passed.
     * @retval OS_ERROR_INVALID_PARAMETER If the requested length exceeds
     *                                    the dataport size.
     * @retval other                      Each component implementing this
     *                                    might have additional error codes.
     *
     * @param[in]     handle  Handle to a previously created and bound socket.
     * @param[in,out] pLen    Length of the data that should be read from the
     *                        source socket. Will be overwritten by the
     *                        function with the actual amount that was read
     *                        before it returns.
     * @param[out]    srcAddr Address of the source socket that data was
     *                        received from.
     */
    OS_Error_t
    socket_recvfrom(
        in    int                     handle,
        inout size_t                  pLen,
        out   OS_NetworkSocket_Addr_t srcAddr,
    );

    /**
     * Get all pending events for the client's sockets.
     *
     * @retval OS_SUCCESS                 Operation was successful.
     * @retval OS_ERROR_INVALID_PARAMETER If an empty pointer was passed.
     * @retval other                      Each component implementing this
     *                                    might have additional error codes.
     *
     * @param[in]  bufSize         Size of the caller buffer.
     * @param[out] pNumberOfEvents Will be overwritten with the number of
     *                             events.
     */
    OS_Error_t
    socket_getPendingEvents(
        in  size_t bufSize,
        out int    pNumberOfEvents);
};


//==============================================================================
// Component interface fields macros
//==============================================================================

/**
 * Declares the interface fields of a component implementing the user side of
 * the Socket interface.
 *
 * @param[in] prefix Prefix to be used to generate a unique name for the
 *                   connectors.
 */
#define IF_OS_SOCKET_USE( \
    prefix) \
    \
    uses     if_OS_Socket         prefix##_rpc; \
    consumes SocketEventAvailable prefix##_event_notify;

/**
 * Declares the interface fields of a component implementing the Socket
 * interface. This currently allows for up to 8 clients to be connected.
 *
 * @param[in] prefix Prefix to be used to generate a unique name for the
 *                   connectors.
 */
#define IF_OS_SOCKET_PROVIDE( \
    prefix) \
    \
    provides if_OS_Socket prefix##_rpc; \
    \
    emits SocketEventAvailable  prefix##_1_event_notify; \
    emits SocketEventAvailable  prefix##_2_event_notify; \
    emits SocketEventAvailable  prefix##_3_event_notify; \
    emits SocketEventAvailable  prefix##_4_event_notify; \
    emits SocketEventAvailable  prefix##_5_event_notify; \
    emits SocketEventAvailable  prefix##_6_event_notify; \
    emits SocketEventAvailable  prefix##_7_event_notify; \
    emits SocketEventAvailable  prefix##_8_event_notify;


//==============================================================================
// Component interface field connection macros
//==============================================================================

/**
 * Connect a user (e.g. a user application requiring network connectivity) of an
 * if_OS_Socket interface to a provider (e.g. a NetworkStack).
 *
 * @param[in] inst_nw_stack              Name of the interface provider
 *                                       component instance.
 * @param[in] inst_nw_stack_field_prefix Prefix used to generate a unique
 *                                       name for the connectors in
 *                                       IF_OS_SOCKET_PROVIDE().
 * @param[in] inst_user                  Name of the interface user component
 *                                       instance.
 * @param[in] inst_user_field_prefix     Prefix used to generate a unique name
 *                                       for the connectors in
 *                                       IF_OS_SOCKET_USE().
 * @param[in] user_num                   Number of the interface provider port
 *                                       and event to connect the user component
 *                                       to.
 */
#define IF_OS_SOCKET_CONNECT( \
    inst_nw_stack, \
    inst_nw_stack_field_prefix, \
    inst_user, \
    inst_user_field_prefix, \
    user_num) \
    \
    connection seL4RPCDataport conn_##inst_nw_stack##_##inst_user##_rpc( \
        from inst_user.inst_user_field_prefix##_rpc, \
        to   inst_nw_stack.inst_nw_stack_field_prefix##_rpc); \
    \
    connection seL4Notification \
        conn_##inst_nw_stack##_##inst_user##_event_notify( \
            from inst_nw_stack.inst_nw_stack_field_prefix##_##user_num##_event_notify, \
            to   inst_user.inst_user_field_prefix##_event_notify);
